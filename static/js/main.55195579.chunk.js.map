{"version":3,"sources":["App.js","layouts/Button.js","layouts/Answer.js","serviceWorker.js","index.js"],"names":["App","state","answer","buttonPress","buttonName","calculate","reset","backspace","setState","eval","slice","className","this","Component","MyButtons","e","props","target","name","onClick","Answer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"41CAMMA,I,+wBACJC,MAAO,CACLC,OAAO,I,MAETC,YAAc,SAAAC,GACK,MAAbA,EACF,MAAKC,YAEc,MAAbD,EACN,MAAKE,QAEc,OAAbF,EACN,MAAKG,YAIP,MAAKC,SAAS,CACZN,OAAO,MAAKD,MAAMC,OAASE,K,MAI/BC,UAAW,WACT,IACA,MAAKG,SAAS,CACVN,QAAQO,KAAK,MAAKR,MAAMC,SAAW,IAAK,KAG5C,eACE,MAAKM,SAAS,CACZN,OAAO,Y,MAKbK,UAAW,WACT,MAAKC,SAAS,CACVN,OAAO,MAAKD,MAAMC,OAAOQ,MAAM,GAAG,M,MAKxCJ,MAAO,WACL,MAAKE,SAAS,CACVN,OAAO,M,iOAKX,OACE,kEAAKS,UAAU,OACb,iEAAIA,UAAU,SAAd,eACA,2DAAC,+CAAD,CAAQT,OAAQU,KAAKX,MAAMC,SAC3B,2DAAC,+CAAD,CAAWC,YAAaS,KAAKT,cAC7B,4E,KArDUU,8CA6DHb,2B,6EClETc,E,4MACNX,YAAa,SAACY,GACV,EAAKC,MAAMb,YAAYY,EAAEE,OAAOC,O,uDAG9B,OACI,yBAAKP,UAAU,UACX,4BAAQO,KAAK,IAAIC,QAASP,KAAKT,aAA/B,KACA,4BAAQe,KAAK,KAAKC,QAASP,KAAKT,aAAhC,UACA,4BAAQe,KAAK,IAAIC,QAASP,KAAKT,aAA/B,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,KACA,4BAAQe,KAAK,IAAKC,QAASP,KAAKT,aAAhC,U,GAvBUU,aAgCTC,O,6EChCTM,E,uKAEA,OACA,yBAAKT,UAAU,UAAUC,KAAKI,MAAMd,Y,GAHrBW,aAQNO,O,gKCGKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC5B,EAAA,EAAD,OAEF6B,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.55195579.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport MyButtons from './layouts/Button';\r\nimport Answer from './layouts/Answer'\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component{\r\n  state ={\r\n    answer:''\r\n  } \r\n  buttonPress = buttonName =>{\r\n    if (buttonName==='='){\r\n      this.calculate()\r\n    }\r\n    else if(buttonName==='C'){\r\n      this.reset()\r\n    }\r\n    else if(buttonName==='CE'){\r\n      this.backspace()\r\n    }  \r\n    else{\r\n      \r\n    this.setState({\r\n      answer:this.state.answer + buttonName\r\n    });\r\n    }\r\n  }     \r\n  calculate =()=>{\r\n    try{\r\n    this.setState({\r\n        answer:(eval(this.state.answer) || \"\") +\"\"\r\n\r\n    });}\r\n    catch{\r\n      this.setState({\r\n        answer:\"error\"\r\n      })\r\n      \r\n    }\r\n  }\r\n  backspace =()=>{\r\n    this.setState({\r\n        answer:this.state.answer.slice(0,-1)\r\n\r\n    });\r\n  }\r\n\r\n  reset =()=>{\r\n    this.setState({\r\n        answer:\"\"\r\n\r\n    });\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"title\"> CALCULATOR</h1>\r\n        <Answer answer={this.state.answer}/>\r\n        <MyButtons buttonPress={this.buttonPress}/>\r\n        <div>\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nclass MyButtons extends Component{\r\nbuttonPress =(e) =>{\r\n    this.props.buttonPress(e.target.name);\r\n} \r\n  render(){\r\n      return(\r\n          <div className=\"button\">\r\n              <button name=\"C\" onClick={this.buttonPress}>C</button>\r\n              <button name=\"CE\" onClick={this.buttonPress}>BSPACE</button>\r\n              <button name=\"1\" onClick={this.buttonPress}>1</button>\r\n              <button name=\"2\"  onClick={this.buttonPress}>2</button>\r\n              <button name=\"3\"  onClick={this.buttonPress}>3</button>\r\n              <button name=\"4\"  onClick={this.buttonPress}>4</button>\r\n              <button name=\"5\"  onClick={this.buttonPress}>5</button>\r\n              <button name=\"6\"  onClick={this.buttonPress}>6</button>\r\n              <button name=\"7\"  onClick={this.buttonPress}>7</button>\r\n              <button name=\"8\"  onClick={this.buttonPress}>8</button>\r\n              <button name=\"9\"  onClick={this.buttonPress}>9</button>\r\n              <button name=\"0\"  onClick={this.buttonPress}>0</button>\r\n              <button name=\"+\"  onClick={this.buttonPress}>+</button>\r\n              <button name=\"-\"  onClick={this.buttonPress}>-</button>\r\n              <button name=\"*\"  onClick={this.buttonPress}>*</button>\r\n              <button name=\"/\"  onClick={this.buttonPress}>/</button> \r\n              <button name=\"=\"  onClick={this.buttonPress}>=</button>              \r\n              \r\n              \r\n          </div>\r\n         \r\n      );\r\n  }\r\n}\r\n\r\nexport default MyButtons;\r\n","import React, { Component } from 'react';\r\nclass Answer extends Component{\r\n  render(){\r\n      return(\r\n      <div className=\"answer\">{this.props.answer}</div>      \r\n      );\r\n  }\r\n}\r\n\r\nexport default Answer;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}